{"version":3,"sources":["../../src/test/server.test.js"],"names":["should","require","request","HOST","token","clearDataBase","console","log","Promise","resolve","count","max","Object","keys","mongoose","connection","collections","length","i","remove","describe","beforeEach","done","then","it","json","query","variables","nombre","email","password","genero","post","url","err","res","body","not","exist","expect","statusCode","toBe","have","property","data","addUsuario","headers","loginUSer","getLoginUser","usuarios","getUsuario","usuarioID","repartidorID","direccion","tiempoEspera","restauranteID","categoriaID","restaurante","descripcion","precio","categoria","platilloID","usuario","total","estatus","detalle","platillo","cantidad","pedidoID"],"mappings":"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","sourcesContent":["// require('dotenv').config();\r\nconst should = require('chai').should();\r\n\r\nconst request = require('request');\r\nrequire('../index');\r\nrequire('isomorphic-fetch');\r\n\r\nconst HOST = 'http://localhost:4000/graphql';\r\nlet token;\r\n\r\n\r\nfunction clearDataBase() {\r\n  console.log('Limpiando DATABASE');\r\n  return new Promise(resolve => {\r\n    let count = 0;\r\n    const max = Object.keys(mongoose.connection.collections).length;\r\n    for (const i in mongoose.connection.collections) {\r\n      mongoose.connection.collections[i].remove(function () {\r\n        count++;\r\n        if (count >= max) {\r\n          resolve();\r\n        }\r\n      })\r\n    }\r\n  });\r\n}\r\n\r\n// Usuarios\r\n\r\ndescribe('usuario on', () => {\r\n  beforeEach(function (done) {\r\n    clearDataBase()\r\n      .then(() => done())\r\n      .catch(() => done());\r\n  })\r\n\r\n  it('deberia registra un usuario', function (done) {\r\n    const json = {\r\n      query: \"mutation($data:UsuarioInput){ addUsuario(data:$data){ token } }\",\r\n      variables: {\r\n        \"data\": {\r\n          nombre: 'Maria Catro',\r\n          email: 'Maria@gmail.com',\r\n          password: '123456',\r\n          genero: 'MUJER'\r\n        }\r\n      }\r\n    };\r\n\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      token = body.data.addUsuario.token;\r\n      done(err);\r\n    })\r\n  })\r\n\r\n  it('debe hacer login', function (done) {\r\n    const json = {\r\n      query: \"mutation($email: String, $password: String) { doLogin(email:$email, password:$password) { token }}\",\r\n      variables: {\r\n        email: \"Ruben@gmail.com\",\r\n        password: \"123456\"\r\n      }\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      const loginUSer = body.data.getLoginUser;\r\n      done(err);\r\n    })\r\n  })\r\n\r\n  it('debe hacer la peticion del usuario en sesion', function (done) {\r\n    const json = {\r\n      query: \"{ getLoginUser { nombre }}\",\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      const loginUSer = body.data.getLoginUser;\r\n      done(err);\r\n    })\r\n  })\r\n\r\n  it('debe hacer la peticion de los usuario', function (done) {\r\n    const json = {\r\n      query: \"{getUsuario{ nombre }}\",\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      const usuarios = body.data.getUsuario;\r\n      done(err);\r\n    })\r\n  })\r\n\r\n  it('debe actualizar un usuario', function (done) {\r\n    const json = {\r\n      query: \"mutation($data: UsuarioInput, $usuarioID: ID) { updateUsuario(data:$data, usuarioID:$usuarioID)  {nombre}}\",\r\n      variables: {\r\n        data: {\r\n          nombre: 'Ruben Alarcon',\r\n          email: 'Ruben@gmail.com',\r\n          password: '123456',\r\n          genero: 'HOMBRE'\r\n        },\r\n        usuarioID: \"5d68309a8b4e1429a00ea18e\"\r\n      },\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  })\r\n\r\n  it('debe eliminar un usuario', function (done) {\r\n    const json = {\r\n      query: \"mutation($usuarioID: ID) { deleteUsuario(usuarioID:$usuarioID)  {nombre}} \",\r\n      variables: {\r\n        usuarioID: \"5d68305702f7da1480c6923e\"\r\n      },\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n  // Repartidores\r\n\r\n  it('debe agregar un repartidor', function (done) {\r\n    const json = {\r\n      query: \"mutation($data: RepartidorInput) { addRepartidor(data:$data)  {nombre}} \",\r\n      variables: {\r\n        data: {\r\n          nombre: 'Jose Robles',\r\n          email: 'Jose@UberEats.com.mx',\r\n          password: '123456',\r\n          genero: 'HOMBRE'\r\n        }\r\n      },\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n  it('debe actualizar un repartidor', function (done) {\r\n    const json = {\r\n      query: \"mutation($data: RepartidorInput, $repartidorID: ID) { updateRepartidor(data:$data, repartidorID:$repartidorID)  {nombre}} \",\r\n      variables: {\r\n        data: {\r\n          nombre: 'Jose Robles',\r\n          email: 'Jose@UberEats.com.mx',\r\n          password: '123456',\r\n          genero: 'HOMBRE'\r\n        },\r\n        repartidorID: \"5d68473481399e3deca8b7fe\"\r\n      },\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n  it('debe actualizar un repartidor', function (done) {\r\n    const json = {\r\n      query: \"mutation($repartidorID: ID) { deleteRepartidor(repartidorID:$repartidorID)  {nombre}} \",\r\n      variables: {\r\n        repartidorID: \"5d68473481399e3deca8b7fe\"\r\n      },\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n  it('debe obtener los repartidores', function (done) {\r\n    const json = {\r\n      query: \"{ getRepartidor {nombre}} \",\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n  // Restaurantes\r\n\r\n  it('debe obtener los restaurantes', function (done) {\r\n    const json = {\r\n      query: \"{ getRestaurante {nombre}} \",\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n  it('debe insertar un restaurante', function (done) {\r\n    const json = {\r\n      query: \"mutation($data: RestauranteInput) { addRestaurante(data:$data) {nombre}} \",\r\n      variables: {\r\n        data: {\r\n          nombre: 'Bonhomia',\r\n          direccion: 'Alv. Obregon #150',\r\n          tiempoEspera: '20 - 30 min'\r\n        },\r\n      }\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n\r\n  it('debe actualiza un restaurante', function (done) {\r\n    const json = {\r\n      query: \"mutation($data: RestauranteInput, $restauranteID: ID) { updateRestaurante(data:$data, restauranteID:$restauranteID) {nombre}} \",\r\n      variables: {\r\n        data: {\r\n          nombre: 'Full House',\r\n          direccion: 'Ciudade Hermanas #50',\r\n          tiempoEspera: '25 - 35 min'\r\n        },\r\n        restauranteID: \"5d684d6db62858456ce7c73c\"\r\n      }\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n  it('debe eliminar un restaurante', function (done) {\r\n    const json = {\r\n      query: \"mutation($restauranteID: ID) { deleteRestaurante(restauranteID:$restauranteID) {nombre}} \",\r\n      variables: {\r\n        restauranteID: \"5d684e105f3aa247c880de22\"\r\n      }\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n  // Categorias\r\n\r\n\r\n  it('debe obtener las categorias', function (done) {\r\n    const json = {\r\n      query: \"{ getCategoria {nombre}} \",\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n\r\n  it('debe insertar una categoria', function (done) {\r\n    const json = {\r\n      query: \"mutation($data: CategoriaInput) { addCategoria(data:$data) {nombre}} \",\r\n      variables: {\r\n        data: {\r\n          nombre: 'Italiana',\r\n        },\r\n      }\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n\r\n  it('debe actualizar una categoria', function (done) {\r\n    const json = {\r\n      query: \"mutation($data: CategoriaInput, $categoriaID: ID) { updateCategoria(data:$data, categoriaID:$categoriaID) {nombre}} \",\r\n      variables: {\r\n        data: {\r\n          nombre: 'Mexicana',\r\n        },\r\n        categoriaID: \"5d684f370b195f1d9077bf1e\"\r\n      }\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n  it('debe eliminar una categoria', function (done) {\r\n    const json = {\r\n      query: \"mutation($categoriaID: ID) { deleteCategoria(categoriaID:$categoriaID) {nombre}} \",\r\n      variables: {\r\n        categoriaID: \"5d6850d812de8f42c0ca95d9\"\r\n      }\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n  // Platillos\r\n\r\n  it('debe obtener los platillos', function (done) {\r\n    const json = {\r\n      query: \"{ getPlatillo {nombre}} \",\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n  it('debe insertar un platillo', function (done) {\r\n    const json = {\r\n      query: \"mutation($data: PlatilloInput) { addPlatillo(data:$data) {nombre}} \",\r\n      variables: {\r\n        data: {\r\n          restaurante: '5d684d6db62858456ce7c73c',\r\n          nombre: 'Tacos dorados',\r\n          descripcion: 'Orden con 4 pisesas, su caldo y ensalada de verduras.',\r\n          precio: 152.0,\r\n          categoria: '5d684f370b195f1d9077bf1e'\r\n        },\r\n      }\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n  it('debe actualizar un platillo', function (done) {\r\n    const json = {\r\n      query: \"mutation($data: PlatilloInput, $platilloID: ID) { updatePlatillo(data:$data, platilloID:$platilloID) {nombre}} \",\r\n      variables: {\r\n        data: {\r\n          restaurante: '5d684d6db62858456ce7c73c',\r\n          nombre: 'Tostadas',\r\n          descripcion: 'Orden con 4 pisesas, su caldo y ensalada de verduras.',\r\n          precio: 152.0,\r\n          categoria: '5d684f370b195f1d9077bf1e'\r\n        },\r\n        platilloID: '5d6851f72f289643bccb8f39'\r\n      }\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n  it('debe eliminar un platillo', function (done) {\r\n    const json = {\r\n      query: \"mutation($platilloID: ID) { deletePlatillo(platilloID:$platilloID) {nombre}} \",\r\n      variables: {\r\n        platilloID: '5d6852862690ee37b02e95e6'\r\n      }\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n  // Pedidos\r\n\r\n  it('debe obtener los pedidos', function (done) {\r\n    const json = {\r\n      query: \"{ getPedido {usuario { nombre }}} \",\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n  it('debe insertar un pedido', function (done) {\r\n    const json = {\r\n      query: \"mutation($data: PedidoInput) { addPedido(data:$data) { usuario { nombre } }} \",\r\n      variables: {\r\n        data: {\r\n          usuario: '5d68309a8b4e1429a00ea18e',\r\n          total: 1500.00,\r\n          estatus: 'PEDIDO',\r\n          detalle: [\r\n            {\r\n              restaurante: '5d684d6db62858456ce7c73c',\r\n              platillo: '5d6852635f2e5b4a68558179',\r\n              cantidad: 2\r\n            }\r\n          ]\r\n        },\r\n      }\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n  it('debe agregar repartidor a un pedido', function (done) {\r\n    const json = {\r\n      query: \"mutation($pedidoID: ID) { setRepartidorPedido(pedidoID:$pedidoID) {  nombre  }} \",\r\n      variables: {\r\n        pedidoID: '5d6854e5066a290e08c79c5b'\r\n      }\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n  it('debe marcar un pedido como entregado', function (done) {\r\n    const json = {\r\n      query: \"mutation($pedidoID: ID) { setEntregarPedido(pedidoID:$pedidoID) {  usuario { nombre }  }} \",\r\n      variables: {\r\n        pedidoID: '5d6854e5066a290e08c79c5b'\r\n      }\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n  it('debe eliminar un pedido', function (done) {\r\n    const json = {\r\n      query: \"mutation($pedidoID: ID) { deletePedido(pedidoID:$pedidoID) {  usuario { nombre }  }} \",\r\n      variables: {\r\n        pedidoID: '5d6847a39c9b1e4a0864cac4'\r\n      }\r\n    };\r\n    request.post({\r\n      url: HOST,\r\n      json: json,\r\n      headers: {\r\n        \"Authorization\": token,\r\n      }\r\n    }, function (err, res, body) {\r\n      should.not.exist(err);\r\n      should.exist(res);\r\n      expect(res.statusCode).toBe(200);\r\n      body.should.have.property('data');\r\n      done(err);\r\n    })\r\n  });\r\n\r\n});"],"file":"server.test.js"}