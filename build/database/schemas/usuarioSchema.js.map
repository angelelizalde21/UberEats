{"version":3,"sources":["../../../src/database/schemas/usuarioSchema.js"],"names":["mongoose","require","bcrypt","schema","Schema","usuarioSchema","nombre","type","String","required","email","password","genero","avatar","pedidos","Types","ObjectId","ref","timestamps","prototype","valueOf","toString","pre","next","user","genSalt","error","salt","hash","module","exports"],"mappings":";;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AAEA,IAAME,MAAM,GAAGH,QAAQ,CAACI,MAAxB;AAEA,IAAMC,aAAa,GAAG,IAAIF,MAAJ,CAAW;AAC/BG,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE;AAFJ,GADuB;AAK/BC,EAAAA,KAAK,EAAE;AACLH,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE;AAFL,GALwB;AAS/BE,EAAAA,QAAQ,EAAE;AACRJ,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE;AAFF,GATqB;AAa/BG,EAAAA,MAAM,EAAE;AACNL,IAAAA,IAAI,EAAEC,MADA;AAEN,YAAM,CAAC,QAAD,EAAW,OAAX;AAFA,GAbuB;AAiB/BK,EAAAA,MAAM,EAAE;AACNN,IAAAA,IAAI,EAAEC;AADA,GAjBuB;AAoB/BM,EAAAA,OAAO,EAAE,CAAC;AACRP,IAAAA,IAAI,EAAEJ,MAAM,CAACY,KAAP,CAAaC,QADX;AAERC,IAAAA,GAAG,EAAE;AAFG,GAAD;AApBsB,CAAX,EAyBnB;AAAEC,EAAAA,UAAU,EAAE;AAAd,CAzBmB,CAAtB;;AA2BAlB,QAAQ,CAACe,KAAT,CAAeC,QAAf,CAAwBG,SAAxB,CAAkCC,OAAlC,GAA4C,YAAY;AACtD,SAAO,KAAKC,QAAL,EAAP;AACD,CAFD;;AAIAhB,aAAa,CAACiB,GAAd,CAAkB,MAAlB,EAA0B,UAAUC,IAAV,EAAgB;AACxC,MAAIC,IAAI,GAAG,IAAX;AACAtB,EAAAA,MAAM,CAACuB,OAAP,CAAe,EAAf,EAAmB,UAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AACxCzB,IAAAA,MAAM,CAAC0B,IAAP,CAAYJ,IAAI,CAACb,QAAjB,EAA2BgB,IAA3B,EAAiC,UAAUD,KAAV,EAAiBE,IAAjB,EAAuB;AACtD,UAAIF,KAAJ,EAAW,OAAOH,IAAI,CAACG,KAAD,CAAX;AACXF,MAAAA,IAAI,CAACb,QAAL,GAAgBiB,IAAhB;AACAL,MAAAA,IAAI;AACL,KAJD;AAKD,GAND;AAOD,CATD;AAWAM,MAAM,CAACC,OAAP,GAAiBzB,aAAjB","sourcesContent":["const mongoose = require('mongoose');\r\nconst bcrypt = require('bcrypt');\r\n\r\nconst schema = mongoose.Schema;\r\n\r\nconst usuarioSchema = new schema({\r\n  nombre: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  genero: {\r\n    type: String,\r\n    enum: ['HOMBRE', 'MUJER']\r\n  },\r\n  avatar: {\r\n    type: String,\r\n  },\r\n  pedidos: [{\r\n    type: schema.Types.ObjectId,\r\n    ref: 'pedidos'\r\n  }]\r\n\r\n}, { timestamps: true });\r\n\r\nmongoose.Types.ObjectId.prototype.valueOf = function () {\r\n  return this.toString();\r\n};\r\n\r\nusuarioSchema.pre(\"save\", function (next) {\r\n  let user = this;\r\n  bcrypt.genSalt(10, function (error, salt) {\r\n    bcrypt.hash(user.password, salt, function (error, hash) {\r\n      if (error) return next(error);\r\n      user.password = hash;\r\n      next();\r\n    });\r\n  });\r\n});\r\n\r\nmodule.exports = usuarioSchema;"],"file":"usuarioSchema.js"}